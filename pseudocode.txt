MYSQL Week - Homework Pseudocode __

BAMAZON

1. Set up Folder as a repo - -

2 Create `bamazonCustomer.js` file
    A.require MYSQL 
    B.require Inquirer

3. Run NPM INIT

4. INstall the packages

5. Create a SQL files that runs the SQL scripts below. 
    Even if we run these direclty in MySQL workbench, need to create a file with all the scripts.

6.Create a MySQL Database called `bamazon`.

7. Then create a Table inside of that database called `products`.
    A. The products table should have each of the following columns:

   B. item_id (unique id for each product)

   C. product_name (Name of product)

   D. department_name

   E. price (cost to customer)

   F. stock_quantity (how much of the product is available in stores)

8. Populate this database with around 10 different products. (i.e. Insert "mock" data rows into this database and table).

5. Go back to `bamazonCustomer.js`. Running this application will first display all of the items available for sale. 
Include the ids, names, and prices of products for sale.

6. The app should then prompt users with two messages.
   Create a start() function with inquire?
   Or make a constructor function called NewOrder?

   * The first should ask them the ID of the product they would like to buy.
   * The second message should ask how many units of the product they would like to buy.

7. Once the customer has placed the order, your application should check if your store has enough of 
the product to meet the customer's request.

    (.then part of function) which I think is a promise.  :) not sure

    Execute a query on the connection, based on customer's answers
        One query with the id
        and another sript to read the quantity using a where clause

8. If not, the app should log a phrase like `Insufficient quantity!`, and then prevent the order from going through.
    Ask would you like to  A- exit?
     OR B- Search for another item?
     and execute appropriate code for the answer.

8. However, if your store _does_ have enough of the product, you should fulfill the customer's order.
   * This means updating the SQL database to reflect the remaining quantity.
    run script that decrements the amount.
   * Once the update goes through, show the customer the total cost of their purchase.
   multiply cost times quantity and log to console.
   add another message confirming order and that you will get it in 4 biz days....or similar.


   ****Try manager level functionality if desired****

   when program starts...ask if manager or customer

   add item to inventory, through prompts....these will fill parameters of a constructor function
   CreateProduct

    If a manager selects `Add to Inventory`,
     your app should display a prompt that will let the manager
      "add more" of any item currently in the store.

